Index: src/Account.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class Account implements Comparable <Account> { // only accounts can be compared\r\n\r\n    public String name;\r\n    public int accountNumber;\r\n    public static double DEFAULT_INTEREST_RATE = 1.5;\r\n    public static double DEFAULT_MAX_OVERDRAFT = -1500.00;\r\n    private double balance;\r\n    private double interestRate;\r\n    private double maxOverdraft;\r\n\r\n\r\n\r\n    public Account(int nr,double balance, double zinsen, double overdraft) {\r\n        this.accountNumber = nr;\r\n        this.interestRate = zinsen;\r\n        this.maxOverdraft = overdraft;\r\n        this.balance = balance;\r\n\r\n    }\r\n\r\n    public Account(int nr, double zinsen) {\r\n        this.accountNumber = nr;\r\n        this.DEFAULT_INTEREST_RATE = zinsen;\r\n\r\n    }\r\n\r\n    public Account(int nr) {\r\n        this.accountNumber = nr;\r\n    }\r\n\r\n    public static Account createFromString(String s) throws AccountPersistenceException {\r\n        String arr[] = s.strip().replaceAll(\"\\\\s\", \"\").split(\";\");\r\n\r\n        // [0] = nr\r\n        // [1] = ktostd\r\n        // [2] = zinsen\r\n        // [3] = max overdraft\r\n        // [4] =\r\n\r\n        try {\r\n            if (arr.length == 4) {\r\n\r\n                Account acc = new Account(Integer.parseInt(arr[0]), Double.parseDouble(arr[2]));\r\n                acc.setBalance(Double.parseDouble(arr[1]));\r\n                acc.setMaxOverdraft(Double.parseDouble(arr[3]));\r\n\r\n                return acc;\r\n            } else if (arr.length == 5) {\r\n                YouthAccount youthacc = new YouthAccount(Integer.parseInt(arr[0]), Integer.parseInt(arr[arr.length - 1]));\r\n                youthacc.setBalance(Double.parseDouble(arr[1]));\r\n                youthacc.setInterestRate(Double.parseDouble(arr[2]));\r\n                youthacc.setMaxOverdraft(Double.parseDouble(arr[3]));\r\n                return youthacc;\r\n            }\r\n        }\r\n        catch (Exception ex){\r\n            throw new AccountPersistenceException(\"Account specification is invalid.\", ex);\r\n        }\r\n        throw new AccountPersistenceException(\"Account specification is too long/short.\");\r\n\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(\"%d; %.1f; %.1f; %.1f\", this.accountNumber, this.balance, this.DEFAULT_INTEREST_RATE, this.DEFAULT_MAX_OVERDRAFT);\r\n    }\r\n\r\n\r\n    public double getBalance() {\r\n        return balance;\r\n    }\r\n    public void setAccountNumber(int accountNumber) {\r\n        this.accountNumber = accountNumber;\r\n    }\r\n\r\n    public void setBalance(double balance) {\r\n        if(balance < this.maxOverdraft){\r\n            throw new IllegalArgumentException();\r\n        }\r\n        this.balance = balance;\r\n    }\r\n\r\n\r\n\r\n    public double getInterestRate() {\r\n        return DEFAULT_INTEREST_RATE;\r\n    }\r\n\r\n    public double getMaxOverdraft() {\r\n        return DEFAULT_MAX_OVERDRAFT;\r\n    }\r\n\r\n    public void setMaxOverdraft(double maxOverdraft) {\r\n        if(maxOverdraft> 0 || maxOverdraft > this.balance){\r\n            throw new IllegalArgumentException();\r\n        }\r\n        this.maxOverdraft = maxOverdraft;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Account account = (Account) o;\r\n        if(this.accountNumber == ((Account) o).accountNumber)\r\n            return true;\r\n        return accountNumber == account.accountNumber && Double.compare(account.balance, balance) == 0;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(accountNumber, balance);\r\n    }\r\n\r\n    public void depositAmount(double value) {\r\n        if(value < 0){\r\n            throw new IllegalArgumentException(\"darf nicht < 0 sein\");\r\n        }else {\r\n            balance += value;\r\n        }\r\n    }\r\n\r\n    public void withdrawAmount(double value) {\r\n        if(value < 0){\r\n            throw new IllegalArgumentException(\"not < 0\");\r\n        }\r\n        if(balance - value < this.getMaxOverdraft()){\r\n            throw new IllegalArgumentException(\"Too much\");\r\n        }else{\r\n            balance -= value;\r\n        }\r\n    }\r\n\r\n    public int getAccountNumber() {\r\n        return accountNumber;\r\n    }\r\n\r\n    public void setInterestRate(double value) {\r\n        DEFAULT_INTEREST_RATE = value;\r\n    }\r\n\r\n\r\n    @Override\r\n    public int compareTo(Account o) {\r\n\r\n        //wenn beide elemente gleich sind = 0\r\n        //wenn die zahl1 grösser als die zahl 2 ist dann = 1\r\n        //wenn die zahl2 grösser als zahl1 ist dann = -1\r\n\r\n        /*\r\n        if(this.balance == o.balance){ //gleich 0\r\n            return 0;\r\n        }else if(this.balance > o.balance){ // grösser 1\r\n            return 1;\r\n        }else{ // kleiner -1\r\n            return -1;\r\n        }\r\n*/\r\n\r\n        // 1\r\n        // -1\r\n        // 0\r\n\r\n        if(this.accountNumber == o.accountNumber){ // gleich 0\r\n            return 0;\r\n        }else if(this.accountNumber > o.accountNumber){ // grösser 1\r\n            return 1;\r\n        }else{ // kleiner -1\r\n            return -1;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Account.java b/src/Account.java
--- a/src/Account.java	(revision b0c3a1cc1abe9a74135ec028c24ef2d4d47495e5)
+++ b/src/Account.java	(date 1664528889831)
@@ -40,11 +40,9 @@
         // [1] = ktostd
         // [2] = zinsen
         // [3] = max overdraft
-        // [4] =
 
         try {
             if (arr.length == 4) {
-
                 Account acc = new Account(Integer.parseInt(arr[0]), Double.parseDouble(arr[2]));
                 acc.setBalance(Double.parseDouble(arr[1]));
                 acc.setMaxOverdraft(Double.parseDouble(arr[3]));
